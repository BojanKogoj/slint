// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial


import { cupertino } from "cupertino.slint";

// Allows to select a value from a range of values.
export Slider := Rectangle {
    in property<float> maximum: 100;
    in property<float> minimum: 0;
    in-out property<float> value;
    out property<bool> has-focus: fs.has-focus;
    in property<bool> enabled <=> touch.enabled;
    callback changed(float);

    min-height: 28px;
    min-width: 100px;
    horizontal-stretch: 1;
    vertical-stretch: 0;
    
    accessible-role: slider;
    accessible-value: value;
    accessible-value-minimum: minimum;
    accessible-value-maximum: maximum;
    accessible-value-step: (maximum - minimum) / 100;

    i_container := Rectangle {
        y: (parent.height - height) / 2;
        width: 100%;
        height: 4px;
        background: cupertino.palette.surface;
        border-radius: 4px;
    }

    track := Rectangle {
        x: i_container.x;
        y: (parent.height - height) / 2;
        width: i_handle.x + (i_handle.width / 2);
        height: i_container.height;
        background: cupertino.palette.primary;
        border-radius: i_container.border-radius;
    }


    i_handle := Rectangle {
        x: (parent.width - width) * (value - minimum) / (maximum - minimum);
        y: (parent.height - height) / 2;
        width: root.height;
        height: root.min-height;
        background: cupertino.palette.white;
        border-radius: max(width, height) / 2;
        border-width: 1px;
        border-color: cupertino.palette.shadow;
        // drop-shadow-color: 
        // drop-shadow-blur: 1px;
        // drop-shadow-offset-y: 1px;
    }

    touch := TouchArea {
        property <float> pressed-value;
        property <bool> handle-hover: has-hover && mouse-x >= i_handle.x && mouse-x <= i_handle.x + i_handle.width 
            && mouse-y >= i_handle.y && mouse-y <= i_handle.y + i_handle.height;
        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                pressed-value = root.value;
            }
        }
        moved => {
            if (enabled && pressed) {
                value = max(root.minimum, min(root.maximum,
                    pressed-value + (touch.mouse-x - touch.pressed-x) * (maximum - minimum) / (root.width - i_handle.width)));
                root.changed(value);
            }
        }
    }

    fs := FocusScope {
        width: 0px;

        key-pressed(event) => {
            if (enabled && event.text == Key.RightArrow) {
                value = Math.min(value + 1, maximum);
                accept
            } else if (enabled && event.text == Key.LeftArrow) {
                value = Math.max(value - 1, minimum);
                accept
            } else {
                reject
            }
        }
    }

    states [
        disabled when !enabled : {
            opacity: cupertino.opacity-disabled;
        }
    ]
}
