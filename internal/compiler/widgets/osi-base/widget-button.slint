// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial


import { osi } from "osi.slint";

export Button := Rectangle {
    callback clicked;

    property<string> text <=> label.text;
    property<bool> has-focus: fs.has-focus;
    property<bool> pressed: self.enabled && touch.pressed;
    property<bool> enabled <=> touch.enabled;
    property<bool> checkable;
    property<bool> checked;
    property<image> icon;
    property<length> font-size <=> label.font-size;

    accessible-label <=> label.text;
    accessible-role: button;
    horizontal-stretch: 0;
    vertical-stretch: 0;
    min-height: 50px;
    border-radius: 8px;
    background: osi.palette.primary;

    i_layout := HorizontalLayout {
        padding-left: 16px;
        padding-right: 16px;
        padding-top: 3px;
        padding-bottom: 3px;
        spacing: 8px;

        if (icon.width > 0 && icon.height > 0): Image {
            source <=> icon;
            width: 24px;
        }

        label := Text {
            color: osi.palette.on-primary;
            horizontal-alignment: center;
            vertical-alignment: center;
            font-weight: osi.typo.default.font-weight;
            font-size: osi.typo.default.font-size;
        }
    }

    touch := TouchArea {
        clicked => {
            if (root.checkable) {
                root.checked = !root.checked;
            }
            root.clicked();
        }
    }

    fs := FocusScope {
        width: 0px; // Do not react on clicks
        enabled <=> root.enabled;
        key-pressed(event) => {
            if (event.text == " " || event.text == "\n") {
                 touch.clicked();
                 return accept;
            }
            return reject;
        }
    }

    i_focus_border := Rectangle {  
        x: (parent.width - width) / 2;
        width: parent.width + 4px;
        height: parent.height + 4px;
        border-radius: parent.border-radius + 2px;
        border-width: 1px;
        border-color: osi.palette.text;
        opacity: 0.0;

        animate opacity { duration: osi.durations.medium; }
    }

     states [
        disabled when !root.enabled : {
           opacity: 0.5;
        }
        pressed when touch.pressed : {
            background: osi.palette.primary-dark;
        }
        checked when root.checked : {
            background: osi.palette.primary-dark;
        }
        focused when fs.has-focus : {
            i_focus_border.opacity: 1.0;
        }
    ]

    animate background { duration: osi.durations.medium; } 
}